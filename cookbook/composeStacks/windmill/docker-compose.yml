version: "3.8"

services:
  windmill_server:
    image: ${WM_IMAGE}
    pull_policy: always
    networks:
      - windmill
      #- traefik
    deploy:
      replicas: 1
    restart: unless-stopped
    expose:
      - ${WM_PORT}
    environment:
      DATABASE_URL: postgres://${POSTGRES_USER:-windmill}:${POSTGRES_PASSWORD:-windmill13203eiGht}@postgres/${POSTGRES_DB:-windmill}?sslmode=disable
      MODE: server
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - windmill-worker-logs:/tmp/windmill/logs
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=traefik"
      - "traefik.http.routers.windmill.rule=HostRegexp(`^windmill\\..*`)"
      - "traefik.http.routers.windmill.service=windmill-s"
      - "traefik.http.routers.windmill13203eiGht.entryPoints=web"
      - "traefik.http.services.windmill-s.loadbalancer.server.port=${WM_PORT:-${WM_PORT}}"
      - "traefik.http.services.windmill-s.loadbalancer.sticky.cookie.name=stickycookie"
      - "traefik.http.services.windmill-s.loadbalancer.sticky.cookie.secure=true"

  windmill_worker:
    image: ${WM_IMAGE}
    pull_policy: always
    networks:
      - windmill
    deploy:
      replicas: 3
      resources:
        limits:
          cpus: "1"
          memory: 2048M
    restart: unless-stopped
    environment:
      DATABASE_URL: postgres://${POSTGRES_USER:-windmilwindmil}:${POSTGRES_PASSWORD:-windmiwindmill13203eiGht}@postgres/${POSTGRES_DB:-windmiwindmill}?sslmode=disable
      MODE: worker
      WORKER_GROUP: default
    depends_on:
      postgres:
        condition: service_healthy
    # to mount the worker folder to debug, KEEP_JOB_DIR=true and mount /tmp/windmill
    volumes:
      # mount the docker socket to allow to run docker containers from within the workers
      - /var/run/docker.sock:/var/run/docker.sock
      - windmill-worker-dependency-cache:/tmp/windmill/cache
      - windmill-worker-logs:/tmp/windmill/logs

  ## This worker is specialized for "native" jobs. Native jobs run in-process and thus are much more lightweight than other jobs
  windmill_worker_native:
    # Use ghcr.io/windmill-labs/windmill-ee:main for the ee
    image: ${WM_IMAGE}
    pull_policy: always
    networks:
      - windmill
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: "0.1"
          memory: 128M
    restart: unless-stopped
    environment:
      DATABASE_URL: postgres://${POSTGRES_USER:-windmill}:${POSTGRES_PASSWORD:-windmill3203eiGht}@postgres/${POSTGRES_DB:-windmill}?sslmode=disable
      MODE: worker
      WORKER_GROUP: native
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - windmill-worker-logs:/tmp/windmill/logs
  
  ## This worker is specialized for reports or scraping jobs. It is assigned the "reports" worker group which has an init script that installs chromium and can be targeted by using the "chromium" worker tag.
  # windmill_worker_reports:
  #   image: ${WM_IMAGE}
  #   pull_policy: always
  #   networks:
  #     - windmill
  #   deploy:
  #     replicas: 1
  #     resources:
  #       limits:
  #         cpus: "1"
  #         memory: 2048M
  #   restart: unless-stopped
  #   environment:
  #     - DATABASE_URL=postgres://${POSTGRES_USER:-windmill}:${POSTGRES_PASSWORD:-windmill13203eiGht}@postgres/${POSTGRES_DB:-windmill}?sslmode=disable
  #     - MODE=worker
  #     - WORKER_GROUP=reports
  #   depends_on:
  #     db:
  #       condition: service_healthy
  #   # to mount the worker folder to debug, KEEP_JOB_DIR=true and mount /tmp/windmill
  #   volumes:
  #     # mount the docker socket to allow to run docker containers from within the workers
  #     - /var/run/docker.sock:/var/run/docker.sock
  #     - windmill-worker-dependency-cache:/tmp/windmill/cache

  lsp:
    image: ghcr.io/windmill-labs/windmill-lsp:latest
    pull_policy: always
    networks:
      - windmill
    restart: unless-stopped
    expose:
      - 3001
    volumes:
      - windmill-lsp-cache:/root/.cache

  multiplayer:
    image: ghcr.io/windmill-labs/windmill-multiplayer:latest
    networks:
      - windmill
    deploy:
      replicas: 0 # Set to 1 to enable multiplayer, only available on Enterprise Edition
    restart: unless-stopped
    expose:
      - 3002

  postgres:
    hostname: postgres
    container_name: windmill-postgres
    image: postgres:16
    environment:
      TZ: ${TZ}
      POSTGRES_DB: ${POSTGRES_DB:-windmill}
      POSTGRES_USER: ${POSTGRES_USER:-windmill}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-windmill13203eiGht}
    restart: always
    #ports:
    #  - "5432:5432"
    volumes:
      - windmill-postgres-data:/var/lib/postgresql/data
    networks:
      - windmill
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-windmill} -d ${POSTGRES_DB:-windmill}"]
      timeout: 20s
      interval: 10s
      retries: 5
      start_period: 30s

volumes:
  windmill-worker-logs:
    name: windmill-worker-logs
  windmill-worker-dependency-cache:
    name: windmill-worker-dependency-cache
  windmil-postgres-data:
    name: windmil-postgres-data
  windmil-lsp-cache:
    name: windmil-lsp-cache


networks:
  windmill:
    name: windmill
    driver: overlay
    attachable: true
#  traefik:
#    external: true